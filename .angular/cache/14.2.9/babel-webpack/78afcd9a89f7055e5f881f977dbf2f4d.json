{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/Personal/angular-paystack/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport { AngularPaystackService } from './angular-paystack.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./angular-paystack.service\";\nexport let AngularPaystackDirective = /*#__PURE__*/(() => {\n  class AngularPaystackDirective {\n    constructor(paystackService) {\n      this.paystackService = paystackService;\n      this.paymentInit = new EventEmitter(); // tslint:disable-line\n\n      this.onClose = new EventEmitter(); // tslint:disable-line\n\n      this.callback = new EventEmitter();\n      this.isPaying = false;\n    }\n\n    pay() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        let errorText = '';\n\n        if (_this.paystackOptions && Object.keys(_this.paystackOptions).length >= 2) {\n          errorText = _this.valdateInput(_this.paystackOptions);\n\n          _this.generateOptions(_this.paystackOptions);\n        } else {\n          errorText = _this.valdateInput(_this);\n\n          _this.generateOptions(_this);\n        }\n\n        if (errorText) {\n          console.error(errorText);\n          return errorText;\n        }\n\n        yield _this.paystackService.loadScript();\n\n        if (_this.isPaying) {\n          return;\n        }\n\n        if (_this.paymentInit.observers.length) {\n          _this.paymentInit.emit();\n        }\n\n        const payment = window.PaystackPop.setup(_this._paystackOptions);\n        payment.openIframe();\n        _this.isPaying = true;\n      })();\n    }\n\n    valdateInput(obj) {\n      if (!this.callback.observers.length) {\n        return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\\'PaymentComplete($event)\\' to check payment status';\n      }\n\n      return this.paystackService.checkInput(obj);\n    }\n\n    generateOptions(obj) {\n      this._paystackOptions = this.paystackService.getPaystackOptions(obj);\n\n      this._paystackOptions.onClose = () => {\n        if (this.onClose.observers.length) {\n          this.isPaying = false;\n          this.onClose.emit();\n        }\n      };\n\n      this._paystackOptions.callback = (...response) => {\n        this.isPaying = false;\n        this.callback.emit(...response);\n      };\n    }\n\n    buttonClick() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        _this2.pay();\n      })();\n    }\n\n  }\n\n  AngularPaystackDirective.ɵfac = function AngularPaystackDirective_Factory(t) {\n    return new (t || AngularPaystackDirective)(i0.ɵɵdirectiveInject(i1.AngularPaystackService));\n  };\n\n  AngularPaystackDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: AngularPaystackDirective,\n    selectors: [[\"\", \"angular-paystack\", \"\"]],\n    hostBindings: function AngularPaystackDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function AngularPaystackDirective_click_HostBindingHandler() {\n          return ctx.buttonClick();\n        });\n      }\n    },\n    inputs: {\n      key: \"key\",\n      email: \"email\",\n      amount: \"amount\",\n      metadata: \"metadata\",\n      ref: \"ref\",\n      currency: \"currency\",\n      plan: \"plan\",\n      quantity: \"quantity\",\n      subaccount: \"subaccount\",\n      channels: \"channels\",\n      transaction_charge: \"transaction_charge\",\n      bearer: \"bearer\",\n      class: \"class\",\n      style: \"style\",\n      paystackOptions: \"paystackOptions\"\n    },\n    outputs: {\n      paymentInit: \"paymentInit\",\n      onClose: \"onClose\",\n      callback: \"callback\"\n    }\n  });\n  return AngularPaystackDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}