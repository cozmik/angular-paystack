{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/Personal/angular-paystack/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport { AngularPaystackService } from './angular-paystack.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./angular-paystack.service\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"*\"];\nexport let AngularPaystackComponent = /*#__PURE__*/(() => {\n  class AngularPaystackComponent {\n    constructor(paystackService) {\n      this.paystackService = paystackService;\n      this.paymentInit = new EventEmitter();\n      this.onClose = new EventEmitter(); // tslint:disable-line\n\n      this.callback = new EventEmitter();\n      this.isPaying = false;\n    }\n\n    pay() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        let errorText = '';\n\n        if (_this.paystackOptions && Object.keys(_this.paystackOptions).length >= 2) {\n          errorText = _this.valdateInput(_this.paystackOptions);\n\n          _this.generateOptions(_this.paystackOptions);\n        } else {\n          errorText = _this.valdateInput(_this);\n\n          _this.generateOptions(_this);\n        }\n\n        if (errorText) {\n          console.error(errorText);\n          return errorText;\n        }\n\n        yield _this.paystackService.loadScript();\n\n        if (_this.isPaying) {\n          return;\n        }\n\n        if (_this.paymentInit.observers.length) {\n          _this.paymentInit.emit();\n        }\n\n        const payment = window.PaystackPop.setup(_this._paystackOptions);\n        payment.openIframe();\n        _this.isPaying = true;\n      })();\n    }\n\n    valdateInput(obj) {\n      if (!this.callback.observers.length) {\n        return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\\'PaymentComplete($event)\\' to check payment status';\n      }\n\n      return this.paystackService.checkInput(obj);\n    }\n\n    generateOptions(obj) {\n      this._paystackOptions = this.paystackService.getPaystackOptions(obj);\n\n      this._paystackOptions.onClose = () => {\n        if (this.onClose.observers.length) {\n          this.isPaying = false;\n          this.onClose.emit();\n        }\n      };\n\n      this._paystackOptions.callback = (...response) => {\n        this.isPaying = false;\n        this.callback.emit(...response);\n      };\n    }\n\n  }\n\n  AngularPaystackComponent.ɵfac = function AngularPaystackComponent_Factory(t) {\n    return new (t || AngularPaystackComponent)(i0.ɵɵdirectiveInject(i1.AngularPaystackService));\n  };\n\n  AngularPaystackComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AngularPaystackComponent,\n    selectors: [[\"angular-paystack\"]],\n    inputs: {\n      key: \"key\",\n      email: \"email\",\n      amount: \"amount\",\n      metadata: \"metadata\",\n      ref: \"ref\",\n      currency: \"currency\",\n      plan: \"plan\",\n      quantity: \"quantity\",\n      channels: \"channels\",\n      subaccount: \"subaccount\",\n      transaction_charge: \"transaction_charge\",\n      bearer: \"bearer\",\n      class: \"class\",\n      style: \"style\",\n      paystackOptions: \"paystackOptions\"\n    },\n    outputs: {\n      paymentInit: \"paymentInit\",\n      onClose: \"onClose\",\n      callback: \"callback\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 2,\n    consts: [[3, \"ngClass\", \"ngStyle\", \"click\"]],\n    template: function AngularPaystackComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function AngularPaystackComponent_Template_button_click_0_listener() {\n          return ctx.pay();\n        });\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", ctx.class)(\"ngStyle\", ctx.style);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgStyle],\n    encapsulation: 2\n  });\n  return AngularPaystackComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}