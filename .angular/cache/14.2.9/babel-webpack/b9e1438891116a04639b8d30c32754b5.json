{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport { InjectionToken, Injectable, Inject, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Component, Input, Output, Directive, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"*\"];\nconst PUBLIC_KEY_TOKEN = new InjectionToken('paystack.publickey');\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @record\r\n */\n\nfunction MyWindow() {}\n\nif (false) {\n  /** @type {?} */\n  MyWindow.prototype.PaystackPop;\n}\n\nclass AngularPaystackService {\n  /**\r\n   * @param {?} token\r\n   */\n  constructor(token) {\n    this.token = token;\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  loadScript() {\n    return new Promise(\n    /**\r\n    * @param {?} resolve\r\n    * @return {?}\r\n    */\n    resolve => {\n      if (window.PaystackPop && typeof window.PaystackPop.setup === 'function') {\n        resolve();\n        return;\n      }\n      /** @type {?} */\n\n\n      const script = window.document.createElement('script');\n      window.document.head.appendChild(script);\n      /** @type {?} */\n\n      const onLoadFunc =\n      /**\r\n      * @return {?}\r\n      */\n      () => {\n        script.removeEventListener('load', onLoadFunc);\n        resolve();\n      };\n\n      script.addEventListener('load', onLoadFunc);\n      script.setAttribute('src', 'https://js.paystack.co/v1/inline.js');\n    });\n  }\n  /**\r\n   * @param {?} obj\r\n   * @return {?}\r\n   */\n\n\n  checkInput(obj) {\n    if (!obj.key && !this.token) {\n      return 'ANGULAR-PAYSTACK: Please insert a your public key';\n    }\n\n    if (!obj.email) {\n      return 'ANGULAR-PAYSTACK: Paystack email cannot be empty';\n    }\n\n    if (!obj.amount) {\n      return 'ANGULAR-PAYSTACK: Paystack amount cannot be empty';\n    }\n\n    if (!obj.ref) {\n      return 'ANGULAR-PAYSTACK: Paystack ref cannot be empty';\n    }\n\n    return '';\n  }\n  /**\r\n   * @param {?} obj\r\n   * @return {?}\r\n   */\n\n\n  getPaystackOptions(obj) {\n    /** @type {?} */\n    const paystackOptions = {\n      key: obj.key || this.token,\n      email: obj.email,\n      amount: obj.amount,\n      ref: obj.ref,\n      metadata: obj.metadata || {},\n      currency: obj.currency || 'NGN',\n      plan: obj.plan || '',\n      channels: obj.channels,\n      quantity: obj.quantity || '',\n      subaccount: obj.subaccount || '',\n      transaction_charge: obj.transaction_charge || 0,\n      // tslint:disable-line\n      bearer: obj.bearer || ''\n    };\n    return paystackOptions;\n  }\n\n}\n\nAngularPaystackService.ɵfac = function AngularPaystackService_Factory(t) {\n  return new (t || AngularPaystackService)(ɵngcc0.ɵɵinject(PUBLIC_KEY_TOKEN));\n};\n\nAngularPaystackService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: AngularPaystackService,\n  factory: AngularPaystackService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nAngularPaystackService.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function AngularPaystackService_Factory() {\n    return new AngularPaystackService(ɵɵinject(PUBLIC_KEY_TOKEN));\n  },\n  token: AngularPaystackService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n  AngularPaystackService.prototype.token;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @record\r\n */\n\n\nfunction MyWindow$1() {}\n\nif (false) {\n  /** @type {?} */\n  MyWindow$1.prototype.PaystackPop;\n}\n\nlet AngularPaystackComponent = /*#__PURE__*/(() => {\n  class AngularPaystackComponent {\n    /**\r\n     * @param {?} paystackService\r\n     */\n    constructor(paystackService) {\n      this.paystackService = paystackService;\n      this.paymentInit = new EventEmitter();\n      this.onClose = new EventEmitter(); // tslint:disable-line\n      // tslint:disable-line\n\n      this.callback = new EventEmitter(); // tslint:disable-line\n\n      this.isPaying = false;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    pay() {\n      return __awaiter(this, void 0, void 0, function* () {\n        /** @type {?} */\n        let errorText = '';\n\n        if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {\n          errorText = this.valdateInput(this.paystackOptions);\n          this.generateOptions(this.paystackOptions);\n        } else {\n          errorText = this.valdateInput(this);\n          this.generateOptions(this);\n        }\n\n        if (errorText) {\n          console.error(errorText);\n          return errorText;\n        }\n\n        yield this.paystackService.loadScript();\n\n        if (this.isPaying) {\n          return;\n        }\n\n        if (this.paymentInit.observers.length) {\n          this.paymentInit.emit();\n        }\n        /** @type {?} */\n\n\n        const payment = window.PaystackPop.setup(this._paystackOptions);\n        payment.openIframe();\n        this.isPaying = true;\n      });\n    }\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\n\n\n    valdateInput(obj) {\n      if (!this.callback.observers.length) {\n        return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\\'PaymentComplete($event)\\' to check payment status';\n      }\n\n      return this.paystackService.checkInput(obj);\n    }\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\n\n\n    generateOptions(obj) {\n      this._paystackOptions = this.paystackService.getPaystackOptions(obj);\n\n      this._paystackOptions.onClose =\n      /**\r\n      * @return {?}\r\n      */\n      () => {\n        if (this.onClose.observers.length) {\n          this.isPaying = false;\n          this.onClose.emit();\n        }\n      };\n\n      this._paystackOptions.callback =\n      /**\r\n      * @param {...?} response\r\n      * @return {?}\r\n      */\n      (...response) => {\n        this.isPaying = false;\n        this.callback.emit(...response);\n      };\n    }\n\n  }\n\n  AngularPaystackComponent.ɵfac = function AngularPaystackComponent_Factory(t) {\n    return new (t || AngularPaystackComponent)(ɵngcc0.ɵɵdirectiveInject(AngularPaystackService));\n  };\n\n  AngularPaystackComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AngularPaystackComponent,\n    selectors: [[\"angular-paystack\"]],\n    inputs: {\n      key: \"key\",\n      email: \"email\",\n      amount: \"amount\",\n      metadata: \"metadata\",\n      ref: \"ref\",\n      currency: \"currency\",\n      plan: \"plan\",\n      quantity: \"quantity\",\n      channels: \"channels\",\n      subaccount: \"subaccount\",\n      transaction_charge: \"transaction_charge\",\n      bearer: \"bearer\",\n      class: \"class\",\n      style: \"style\",\n      paystackOptions: \"paystackOptions\"\n    },\n    outputs: {\n      paymentInit: \"paymentInit\",\n      onClose: \"onClose\",\n      callback: \"callback\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 2,\n    consts: [[3, \"ngClass\", \"ngStyle\", \"click\"]],\n    template: function AngularPaystackComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function AngularPaystackComponent_Template_button_click_0_listener() {\n          return ctx.pay();\n        });\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.class)(\"ngStyle\", ctx.style);\n      }\n    },\n    dependencies: [ɵngcc1.NgClass, ɵngcc1.NgStyle],\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return AngularPaystackComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  AngularPaystackComponent.prototype.key;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.email;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.amount;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.metadata;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.ref;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.currency;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.plan;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.quantity;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.channels;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.subaccount;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.transaction_charge;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.bearer;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.class;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.style;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.paystackOptions;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.paymentInit;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.onClose;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype.callback;\n  /** @type {?} */\n\n  AngularPaystackComponent.prototype._paystackOptions;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  AngularPaystackComponent.prototype.isPaying;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  AngularPaystackComponent.prototype.paystackService;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @record\r\n */\n\n\nfunction MyWindow$2() {}\n\nif (false) {\n  /** @type {?} */\n  MyWindow$2.prototype.PaystackPop;\n}\n\nlet AngularPaystackDirective = /*#__PURE__*/(() => {\n  class AngularPaystackDirective {\n    /**\r\n     * @param {?} paystackService\r\n     */\n    constructor(paystackService) {\n      this.paystackService = paystackService;\n      this.paymentInit = new EventEmitter(); // tslint:disable-line\n      // tslint:disable-line\n\n      this.onClose = new EventEmitter(); // tslint:disable-line\n      // tslint:disable-line\n\n      this.callback = new EventEmitter(); // tslint:disable-line\n\n      this.isPaying = false;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    pay() {\n      return __awaiter(this, void 0, void 0, function* () {\n        /** @type {?} */\n        let errorText = '';\n\n        if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {\n          errorText = this.valdateInput(this.paystackOptions);\n          this.generateOptions(this.paystackOptions);\n        } else {\n          errorText = this.valdateInput(this);\n          this.generateOptions(this);\n        }\n\n        if (errorText) {\n          console.error(errorText);\n          return errorText;\n        }\n\n        yield this.paystackService.loadScript();\n\n        if (this.isPaying) {\n          return;\n        }\n\n        if (this.paymentInit.observers.length) {\n          this.paymentInit.emit();\n        }\n        /** @type {?} */\n\n\n        const payment = window.PaystackPop.setup(this._paystackOptions);\n        payment.openIframe();\n        this.isPaying = true;\n      });\n    }\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\n\n\n    valdateInput(obj) {\n      if (!this.callback.observers.length) {\n        return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\\'PaymentComplete($event)\\' to check payment status';\n      }\n\n      return this.paystackService.checkInput(obj);\n    }\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\n\n\n    generateOptions(obj) {\n      this._paystackOptions = this.paystackService.getPaystackOptions(obj);\n\n      this._paystackOptions.onClose =\n      /**\r\n      * @return {?}\r\n      */\n      () => {\n        if (this.onClose.observers.length) {\n          this.isPaying = false;\n          this.onClose.emit();\n        }\n      };\n\n      this._paystackOptions.callback =\n      /**\r\n      * @param {...?} response\r\n      * @return {?}\r\n      */\n      (...response) => {\n        this.isPaying = false;\n        this.callback.emit(...response);\n      };\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    buttonClick() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.pay();\n      });\n    }\n\n  }\n\n  AngularPaystackDirective.ɵfac = function AngularPaystackDirective_Factory(t) {\n    return new (t || AngularPaystackDirective)(ɵngcc0.ɵɵdirectiveInject(AngularPaystackService));\n  };\n\n  AngularPaystackDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AngularPaystackDirective,\n    selectors: [[\"\", \"angular-paystack\", \"\"]],\n    hostBindings: function AngularPaystackDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function AngularPaystackDirective_click_HostBindingHandler() {\n          return ctx.buttonClick();\n        });\n      }\n    },\n    inputs: {\n      key: \"key\",\n      email: \"email\",\n      amount: \"amount\",\n      metadata: \"metadata\",\n      ref: \"ref\",\n      currency: \"currency\",\n      plan: \"plan\",\n      quantity: \"quantity\",\n      subaccount: \"subaccount\",\n      channels: \"channels\",\n      transaction_charge: \"transaction_charge\",\n      bearer: \"bearer\",\n      class: \"class\",\n      style: \"style\",\n      paystackOptions: \"paystackOptions\"\n    },\n    outputs: {\n      paymentInit: \"paymentInit\",\n      onClose: \"onClose\",\n      callback: \"callback\"\n    }\n  });\n  /** @nocollapse */\n\n  return AngularPaystackDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  AngularPaystackDirective.prototype.key;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.email;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.amount;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.metadata;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.ref;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.currency;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.plan;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.quantity;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.subaccount;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.channels;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.transaction_charge;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.bearer;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.class;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.style;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.paystackOptions;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.paymentInit;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.onClose;\n  /** @type {?} */\n\n  AngularPaystackDirective.prototype.callback;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  AngularPaystackDirective.prototype._paystackOptions;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  AngularPaystackDirective.prototype.isPaying;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  AngularPaystackDirective.prototype.paystackService;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @record\r\n */\n\n\nfunction MyWindow$3() {}\n\nif (false) {\n  /** @type {?} */\n  MyWindow$3.prototype.PaystackPop;\n}\n\nlet AngularPaystackEmbedComponent = /*#__PURE__*/(() => {\n  class AngularPaystackEmbedComponent {\n    // tslint:disable-line\n\n    /**\r\n     * @param {?} paystackService\r\n     */\n    constructor(paystackService) {\n      this.paystackService = paystackService;\n      this.paymentInit = new EventEmitter();\n      this.onClose = new EventEmitter(); // tslint:disable-line\n      // tslint:disable-line\n\n      this.callback = new EventEmitter();\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    pay() {\n      return __awaiter(this, void 0, void 0, function* () {\n        /** @type {?} */\n        let errorText = '';\n\n        if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {\n          errorText = this.valdateInput(this.paystackOptions);\n          this.generateOptions(this.paystackOptions);\n        } else {\n          errorText = this.valdateInput(this);\n          this.generateOptions(this);\n        }\n\n        if (errorText) {\n          console.error(errorText);\n          return errorText;\n        }\n\n        yield this.paystackService.loadScript();\n\n        if (this.paymentInit.observers.length) {\n          this.paymentInit.emit();\n        }\n        /** @type {?} */\n\n\n        const payment = window.PaystackPop.setup(this._paystackOptions);\n        payment.openIframe();\n      });\n    }\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\n\n\n    valdateInput(obj) {\n      if (!this.callback.observers.length) {\n        return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\\'PaymentComplete($event)\\' to check payment status';\n      }\n\n      return this.paystackService.checkInput(obj);\n    }\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\n\n\n    generateOptions(obj) {\n      this._paystackOptions = this.paystackService.getPaystackOptions(obj);\n\n      this._paystackOptions.onClose =\n      /**\r\n      * @return {?}\r\n      */\n      () => {\n        if (this.onClose.observers.length) {\n          this.onClose.emit();\n        }\n      };\n\n      this._paystackOptions.callback =\n      /**\r\n      * @param {...?} response\r\n      * @return {?}\r\n      */\n      (...response) => {\n        this.callback.emit(...response);\n      };\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.error('ANGULAR-PAYSTACK: The paystack embed option is deprecated. Please use the paystack component or directive');\n        this.pay();\n      });\n    }\n\n  }\n\n  AngularPaystackEmbedComponent.ɵfac = function AngularPaystackEmbedComponent_Factory(t) {\n    return new (t || AngularPaystackEmbedComponent)(ɵngcc0.ɵɵdirectiveInject(AngularPaystackService));\n  };\n\n  AngularPaystackEmbedComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AngularPaystackEmbedComponent,\n    selectors: [[\"angular4-paystack-embed\"]],\n    inputs: {\n      key: \"key\",\n      email: \"email\",\n      amount: \"amount\",\n      metadata: \"metadata\",\n      channels: \"channels\",\n      ref: \"ref\",\n      currency: \"currency\",\n      plan: \"plan\",\n      quantity: \"quantity\",\n      subaccount: \"subaccount\",\n      transaction_charge: \"transaction_charge\",\n      bearer: \"bearer\",\n      paystackOptions: \"paystackOptions\"\n    },\n    outputs: {\n      paymentInit: \"paymentInit\",\n      onClose: \"onClose\",\n      callback: \"callback\"\n    },\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"paystackEmbedContainer\"]],\n    template: function AngularPaystackEmbedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return AngularPaystackEmbedComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  AngularPaystackEmbedComponent.prototype.key;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype.email;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype.amount;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype.metadata;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype.channels;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype.ref;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype.currency;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype.plan;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype.quantity;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype.subaccount;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype.transaction_charge;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype.bearer;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype.paystackOptions;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype.paymentInit;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype.onClose;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype.callback;\n  /** @type {?} */\n\n  AngularPaystackEmbedComponent.prototype._paystackOptions;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  AngularPaystackEmbedComponent.prototype.paystackService;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet AngularPaystackModule = /*#__PURE__*/(() => {\n  class AngularPaystackModule {\n    /**\r\n     * @param {?} token\r\n     * @return {?}\r\n     */\n    static forRoot(token) {\n      return {\n        ngModule: AngularPaystackModule,\n        providers: [AngularPaystackService, {\n          provide: PUBLIC_KEY_TOKEN,\n          useValue: token\n        }]\n      };\n    }\n\n  }\n\n  AngularPaystackModule.ɵfac = function AngularPaystackModule_Factory(t) {\n    return new (t || AngularPaystackModule)();\n  };\n\n  AngularPaystackModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: AngularPaystackModule\n  });\n  AngularPaystackModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return AngularPaystackModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AngularPaystackModule, {\n    declarations: function () {\n      return [AngularPaystackComponent, AngularPaystackDirective, AngularPaystackEmbedComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [AngularPaystackComponent, AngularPaystackDirective, AngularPaystackEmbedComponent];\n    }\n  });\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { AngularPaystackComponent, AngularPaystackDirective, AngularPaystackEmbedComponent, AngularPaystackModule, AngularPaystackService as ɵa, PUBLIC_KEY_TOKEN as ɵb }; //# sourceMappingURL=angular4-paystack.js.map","map":null,"metadata":{},"sourceType":"module"}