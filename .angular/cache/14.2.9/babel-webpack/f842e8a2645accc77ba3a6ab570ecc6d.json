{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/Personal/angular-paystack/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, EventEmitter, Component, Input, Output, Directive, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst PUBLIC_KEY_TOKEN = new InjectionToken('paystack.publickey');\nlet AngularPaystackService = /*#__PURE__*/(() => {\n  class AngularPaystackService {\n    constructor(token) {\n      this.token = token;\n    }\n\n    loadScript() {\n      return new Promise(resolve => {\n        if (window.PaystackPop && typeof window.PaystackPop.setup === 'function') {\n          resolve();\n          return;\n        }\n\n        const script = window.document.createElement('script');\n        window.document.head.appendChild(script);\n\n        const onLoadFunc = () => {\n          script.removeEventListener('load', onLoadFunc);\n          resolve();\n        };\n\n        script.addEventListener('load', onLoadFunc);\n        script.setAttribute('src', 'https://js.paystack.co/v1/inline.js');\n      });\n    }\n\n    checkInput(obj) {\n      if (!obj.key && !this.token) {\n        return 'ANGULAR-PAYSTACK: Please insert a your public key';\n      }\n\n      if (!obj.email) {\n        return 'ANGULAR-PAYSTACK: Paystack email cannot be empty';\n      }\n\n      if (!obj.amount) {\n        return 'ANGULAR-PAYSTACK: Paystack amount cannot be empty';\n      }\n\n      if (!obj.ref) {\n        return 'ANGULAR-PAYSTACK: Paystack ref cannot be empty';\n      }\n\n      return '';\n    }\n\n    getPaystackOptions(obj) {\n      const paystackOptions = {\n        key: obj.key || this.token,\n        email: obj.email,\n        amount: obj.amount,\n        ref: obj.ref,\n        metadata: obj.metadata || {},\n        currency: obj.currency || 'NGN',\n        plan: obj.plan || '',\n        channels: obj.channels,\n        quantity: obj.quantity || '',\n        subaccount: obj.subaccount || '',\n        transaction_charge: obj.transaction_charge || 0,\n        bearer: obj.bearer || ''\n      };\n      return paystackOptions;\n    }\n\n  }\n\n  /** @nocollapse */\n  AngularPaystackService.ɵfac = function AngularPaystackService_Factory(t) {\n    return new (t || AngularPaystackService)(i0.ɵɵinject(PUBLIC_KEY_TOKEN));\n  };\n  /** @nocollapse */\n\n\n  AngularPaystackService.ɵprov =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjectable({\n    token: AngularPaystackService,\n    factory: AngularPaystackService.ɵfac,\n    providedIn: 'root'\n  });\n  return AngularPaystackService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst _c0 = [\"*\"];\nlet AngularPaystackComponent = /*#__PURE__*/(() => {\n  class AngularPaystackComponent {\n    constructor(paystackService) {\n      this.paystackService = paystackService;\n      this.paymentInit = new EventEmitter();\n      this.onClose = new EventEmitter(); // tslint:disable-line\n\n      this.callback = new EventEmitter();\n      this.isPaying = false;\n    }\n\n    pay() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        let errorText = '';\n\n        if (_this.paystackOptions && Object.keys(_this.paystackOptions).length >= 2) {\n          errorText = _this.valdateInput(_this.paystackOptions);\n\n          _this.generateOptions(_this.paystackOptions);\n        } else {\n          errorText = _this.valdateInput(_this);\n\n          _this.generateOptions(_this);\n        }\n\n        if (errorText) {\n          console.error(errorText);\n          return errorText;\n        }\n\n        yield _this.paystackService.loadScript();\n\n        if (_this.isPaying) {\n          return;\n        }\n\n        if (_this.paymentInit.observers.length) {\n          _this.paymentInit.emit();\n        }\n\n        const payment = window.PaystackPop.setup(_this._paystackOptions);\n        payment.openIframe();\n        _this.isPaying = true;\n      })();\n    }\n\n    valdateInput(obj) {\n      if (!this.callback.observers.length) {\n        return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\\'PaymentComplete($event)\\' to check payment status';\n      }\n\n      return this.paystackService.checkInput(obj);\n    }\n\n    generateOptions(obj) {\n      this._paystackOptions = this.paystackService.getPaystackOptions(obj);\n\n      this._paystackOptions.onClose = () => {\n        if (this.onClose.observers.length) {\n          this.isPaying = false;\n          this.onClose.emit();\n        }\n      };\n\n      this._paystackOptions.callback = (...response) => {\n        this.isPaying = false;\n        this.callback.emit(...response);\n      };\n    }\n\n  }\n\n  /** @nocollapse */\n  AngularPaystackComponent.ɵfac = function AngularPaystackComponent_Factory(t) {\n    return new (t || AngularPaystackComponent)(i0.ɵɵdirectiveInject(AngularPaystackService));\n  };\n  /** @nocollapse */\n\n\n  AngularPaystackComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: AngularPaystackComponent,\n    selectors: [[\"angular-paystack\"]],\n    inputs: {\n      key: \"key\",\n      email: \"email\",\n      amount: \"amount\",\n      metadata: \"metadata\",\n      ref: \"ref\",\n      currency: \"currency\",\n      plan: \"plan\",\n      quantity: \"quantity\",\n      channels: \"channels\",\n      subaccount: \"subaccount\",\n      transaction_charge: \"transaction_charge\",\n      bearer: \"bearer\",\n      class: \"class\",\n      style: \"style\",\n      paystackOptions: \"paystackOptions\"\n    },\n    outputs: {\n      paymentInit: \"paymentInit\",\n      onClose: \"onClose\",\n      callback: \"callback\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 2,\n    consts: [[3, \"ngClass\", \"ngStyle\", \"click\"]],\n    template: function AngularPaystackComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function AngularPaystackComponent_Template_button_click_0_listener() {\n          return ctx.pay();\n        });\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", ctx.class)(\"ngStyle\", ctx.style);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgStyle],\n    encapsulation: 2\n  });\n  return AngularPaystackComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AngularPaystackDirective = /*#__PURE__*/(() => {\n  class AngularPaystackDirective {\n    constructor(paystackService) {\n      this.paystackService = paystackService;\n      this.paymentInit = new EventEmitter(); // tslint:disable-line\n\n      this.onClose = new EventEmitter(); // tslint:disable-line\n\n      this.callback = new EventEmitter();\n      this.isPaying = false;\n    }\n\n    pay() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        let errorText = '';\n\n        if (_this2.paystackOptions && Object.keys(_this2.paystackOptions).length >= 2) {\n          errorText = _this2.valdateInput(_this2.paystackOptions);\n\n          _this2.generateOptions(_this2.paystackOptions);\n        } else {\n          errorText = _this2.valdateInput(_this2);\n\n          _this2.generateOptions(_this2);\n        }\n\n        if (errorText) {\n          console.error(errorText);\n          return errorText;\n        }\n\n        yield _this2.paystackService.loadScript();\n\n        if (_this2.isPaying) {\n          return;\n        }\n\n        if (_this2.paymentInit.observers.length) {\n          _this2.paymentInit.emit();\n        }\n\n        const payment = window.PaystackPop.setup(_this2._paystackOptions);\n        payment.openIframe();\n        _this2.isPaying = true;\n      })();\n    }\n\n    valdateInput(obj) {\n      if (!this.callback.observers.length) {\n        return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\\'PaymentComplete($event)\\' to check payment status';\n      }\n\n      return this.paystackService.checkInput(obj);\n    }\n\n    generateOptions(obj) {\n      this._paystackOptions = this.paystackService.getPaystackOptions(obj);\n\n      this._paystackOptions.onClose = () => {\n        if (this.onClose.observers.length) {\n          this.isPaying = false;\n          this.onClose.emit();\n        }\n      };\n\n      this._paystackOptions.callback = (...response) => {\n        this.isPaying = false;\n        this.callback.emit(...response);\n      };\n    }\n\n    buttonClick() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        _this3.pay();\n      })();\n    }\n\n  }\n\n  /** @nocollapse */\n  AngularPaystackDirective.ɵfac = function AngularPaystackDirective_Factory(t) {\n    return new (t || AngularPaystackDirective)(i0.ɵɵdirectiveInject(AngularPaystackService));\n  };\n  /** @nocollapse */\n\n\n  AngularPaystackDirective.ɵdir =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineDirective({\n    type: AngularPaystackDirective,\n    selectors: [[\"\", \"angular-paystack\", \"\"]],\n    hostBindings: function AngularPaystackDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function AngularPaystackDirective_click_HostBindingHandler() {\n          return ctx.buttonClick();\n        });\n      }\n    },\n    inputs: {\n      key: \"key\",\n      email: \"email\",\n      amount: \"amount\",\n      metadata: \"metadata\",\n      ref: \"ref\",\n      currency: \"currency\",\n      plan: \"plan\",\n      quantity: \"quantity\",\n      subaccount: \"subaccount\",\n      channels: \"channels\",\n      transaction_charge: \"transaction_charge\",\n      bearer: \"bearer\",\n      class: \"class\",\n      style: \"style\",\n      paystackOptions: \"paystackOptions\"\n    },\n    outputs: {\n      paymentInit: \"paymentInit\",\n      onClose: \"onClose\",\n      callback: \"callback\"\n    }\n  });\n  return AngularPaystackDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AngularPaystackEmbedComponent = /*#__PURE__*/(() => {\n  class AngularPaystackEmbedComponent {\n    constructor(paystackService) {\n      this.paystackService = paystackService;\n      this.paymentInit = new EventEmitter();\n      this.onClose = new EventEmitter(); // tslint:disable-line\n\n      this.callback = new EventEmitter();\n    }\n\n    pay() {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        let errorText = '';\n\n        if (_this4.paystackOptions && Object.keys(_this4.paystackOptions).length >= 2) {\n          errorText = _this4.valdateInput(_this4.paystackOptions);\n\n          _this4.generateOptions(_this4.paystackOptions);\n        } else {\n          errorText = _this4.valdateInput(_this4);\n\n          _this4.generateOptions(_this4);\n        }\n\n        if (errorText) {\n          console.error(errorText);\n          return errorText;\n        }\n\n        yield _this4.paystackService.loadScript();\n\n        if (_this4.paymentInit.observers.length) {\n          _this4.paymentInit.emit();\n        }\n\n        const payment = window.PaystackPop.setup(_this4._paystackOptions);\n        payment.openIframe();\n      })();\n    }\n\n    valdateInput(obj) {\n      if (!this.callback.observers.length) {\n        return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\\'PaymentComplete($event)\\' to check payment status';\n      }\n\n      return this.paystackService.checkInput(obj);\n    }\n\n    generateOptions(obj) {\n      this._paystackOptions = this.paystackService.getPaystackOptions(obj);\n\n      this._paystackOptions.onClose = () => {\n        if (this.onClose.observers.length) {\n          this.onClose.emit();\n        }\n      };\n\n      this._paystackOptions.callback = (...response) => {\n        this.callback.emit(...response);\n      };\n    }\n\n    ngOnInit() {\n      var _this5 = this;\n\n      return _asyncToGenerator(function* () {\n        console.error('ANGULAR-PAYSTACK: The paystack embed option is deprecated. Please use the paystack component or directive');\n\n        _this5.pay();\n      })();\n    }\n\n  }\n\n  /** @nocollapse */\n  AngularPaystackEmbedComponent.ɵfac = function AngularPaystackEmbedComponent_Factory(t) {\n    return new (t || AngularPaystackEmbedComponent)(i0.ɵɵdirectiveInject(AngularPaystackService));\n  };\n  /** @nocollapse */\n\n\n  AngularPaystackEmbedComponent.ɵcmp =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineComponent({\n    type: AngularPaystackEmbedComponent,\n    selectors: [[\"angular-paystack-embed\"]],\n    inputs: {\n      key: \"key\",\n      email: \"email\",\n      amount: \"amount\",\n      metadata: \"metadata\",\n      channels: \"channels\",\n      ref: \"ref\",\n      currency: \"currency\",\n      plan: \"plan\",\n      quantity: \"quantity\",\n      subaccount: \"subaccount\",\n      transaction_charge: \"transaction_charge\",\n      bearer: \"bearer\",\n      paystackOptions: \"paystackOptions\"\n    },\n    outputs: {\n      paymentInit: \"paymentInit\",\n      onClose: \"onClose\",\n      callback: \"callback\"\n    },\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"paystackEmbedContainer\"]],\n    template: function AngularPaystackEmbedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return AngularPaystackEmbedComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AngularPaystackModule = /*#__PURE__*/(() => {\n  class AngularPaystackModule {\n    static forRoot(token) {\n      return {\n        ngModule: AngularPaystackModule,\n        providers: [AngularPaystackService, {\n          provide: PUBLIC_KEY_TOKEN,\n          useValue: token\n        }]\n      };\n    }\n\n  }\n\n  /** @nocollapse */\n  AngularPaystackModule.ɵfac = function AngularPaystackModule_Factory(t) {\n    return new (t || AngularPaystackModule)();\n  };\n  /** @nocollapse */\n\n\n  AngularPaystackModule.ɵmod =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineNgModule({\n    type: AngularPaystackModule\n  });\n  /** @nocollapse */\n\n  AngularPaystackModule.ɵinj =\n  /** @pureOrBreakMyCode */\n  i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return AngularPaystackModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(AngularPaystackModule, {\n    declarations: [AngularPaystackComponent, AngularPaystackDirective, AngularPaystackEmbedComponent],\n    imports: [CommonModule],\n    exports: [AngularPaystackComponent, AngularPaystackDirective, AngularPaystackEmbedComponent]\n  });\n})();\n/*\r\n * Public API Surface of angular-paystack\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { AngularPaystackComponent, AngularPaystackDirective, AngularPaystackEmbedComponent, AngularPaystackModule }; //# sourceMappingURL=angular-paystack.mjs.map","map":null,"metadata":{},"sourceType":"module"}